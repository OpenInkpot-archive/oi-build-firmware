#!/bin/sh
set -e

LINUX_VERSION='2.6.28'
MODE=install
DEVICE=v3
VERSION=$(date +%Y%m%d)

KEEP_WORKDIR=0

set_device() {
    case "$1" in
        v3|v3ext|v3all) DEVICE="$1";;
        n516) DEVICE="$1";;
        *) echo "Unknown device: $1"; exit 1;;
    esac
}

set_mode() {
    case "$1" in
        install|live|nfsroot) MODE="$1";;
        *) echo "Unknown mode: $1"; exit 1;;
    esac
}

usage() {
    echo "Usage: build-fw [--keep-workdir]"
    echo "    [(-d |--device=)(v3|v3ext|v3all|n516)]"
    echo "    [(-m |--mode=)(install|live|nfsroot)]"
    echo "    [<version>]"
    echo
    echo "device defaults to 'v3',"
    echo "mode defaults to 'install',"
    echo "version defaults to today's snapshot."
}

TMP=$(getopt -l help,keep-workdir,device:,mode: -o hd:m: -- "$@")

if [ $? != 0 ]; then
    exit 1
fi

eval set -- "$TMP"

while true; do
    case "$1" in
        --keep-workdir) KEEP_WORKDIR=1; shift;;
        -d|--device) set_device "$2"; shift; shift;;
        -m|--mode) set_mode "$2"; shift; shift;;
        -h|--help) usage; exit 0;;
        --) shift; break;;
        *) echo "Unexpected argument in getopt parsing: $1"; exit 1;;
    esac
done

if [ $# -gt 1 ]; then
    usage
    exit 1
fi

if [ $# -eq 1 ]; then
    VERSION="$1"
fi

if [ $MODE = "live" ] && ( [ $DEVICE = "v3" ] || [ $DEVICE = "v3ext" ] ); then
    echo "Warning: Selecting v3all instead of v3 or v3ext for OI-on-SD"
    DEVICE=v3all
fi

case "$MODE-$DEVICE" in
    nfsroot-v3|nfsroot-n516) :;;
    nfsroot-*) echo "Error: only v3 is supported for nfsroot";  exit 1;;
    *) ;;
esac

case $DEVICE in
    v3|v3all) KERNEL_FLAVOUR=-v3;;
    v3ext) KERNEL_FLAVOUR=-v3ext;;
    n516) KERNEL_FLAVOUR=-n516;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

if [ $MODE = nfsroot ]; then
    KERNEL_FLAVOUR="-nfsroot${KERNEL_FLAVOUR}"
fi

case $DEVICE in
    v3|v3ext|v3all) MANUFACTURER=hanlin;;
    n516) MANUFACTURER=hanvon;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

case $DEVICE in
    v3|v3ext|v3all) ARCH=armel;;
    n516) ARCH=mipsel;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

HOSTARCH=$(dpkg --print-architecture)

# --

OUTPUT_DIR=$(pwd)/output/"$VERSION"
mkdir -p "$OUTPUT_DIR"

OUTPUT_NAME=oi-$MANUFACTURER-$DEVICE-$MODE-$VERSION

WORK_DIR=$(pwd)/$(mktemp build-fw.XXXXXXXX -d)
cleanup() {
    RETCODE=$?
    [ -z "$WORK_DIR" ] || sudo rm -rf "$WORK_DIR"
    return $RETCODE
}
if [ $KEEP_WORKDIR -eq 0 ]; then
    trap cleanup 0
fi

# --

PATH=$PATH:/usr/sbin

#
# FIXME: this script is steaming pile of shit.
#

# Basic stuff
PACKAGES="mdev autosuspend-support dropbear"

# Kernel
PACKAGES="$PACKAGES linux-modules-${LINUX_VERSION}${KERNEL_FLAVOUR}"
if [ "$MODE" = nfsroot ]; then
    PACKAGES="$PACKAGES linux-image-${LINUX_VERSION}${KERNEL_FLAVOUR}"
    PACKAGES="$PACKAGES boot-local-kernel"
fi

# GUI
PACKAGES="$PACKAGES xserver-xfbdev libewl1-engines-all libevas-engines fontconfig"

# Fonts
PACKAGES="$PACKAGES liberation-fonts"

# Applications
PACKAGES="$PACKAGES madshelf libextractor-oi-extras"
PACKAGES="$PACKAGES fbreader"
PACKAGES="$PACKAGES locopdf"
#PACKAGES="$PACKAGES cr3"
PACKAGES="$PACKAGES madeye"
#PACKAGES="$PACKAGES etimetol"

# if [ "$MODE" = "nfsroot" ]; then
#     PACKAGES="$PACKAGES gdbserver"
# fi

ARCHIVES=/var/cache/apt/archives

umount_all() {
    if [ -e "$1" ]; then
        sudo find "$1" -type d -print0 | xargs -0 -r -i{} -- sh -c "! mountpoint -q '{}' || (echo 'unmounting {}'; while sudo umount '{}' 2>/dev/null; do :; done)"
    fi
}

umount_all /rootfs-$HOSTARCH
umount_all /rootfs-$ARCH

sudo rm -rf /rootfs-$HOSTARCH
sudo rm -rf /rootfs-$ARCH

cross-bootstrap-host
cross-bootstrap-target $ARCH

echo "deb http://ftp.iplinux.org/iplinux asimov core security gui media" > /rootfs-$ARCH/etc/apt/sources.list
echo "deb http://openinkpot.org/pub/oi asimov core security gui media" >> /rootfs-$ARCH/etc/apt/sources.list

cross-shell $ARCH apt-get update
cross-shell $ARCH apt-get -y --force-yes dist-upgrade
cross-shell $ARCH apt-get -y --force-yes install $PACKAGES


case $DEVICE in
    v3|v3ext|v3all)
        echo "echo 200 > /sys/class/graphics/fb0/defio_delay" >> /rootfs-$ARCH/etc/init.d/rcS;;
    *)
        :;;
esac

echo "#!/bin/sh
HOME=/home DISPLAY=:0 exec madshelf" > /rootfs-$ARCH/usr/bin/madshelf.sh
chmod a+x /rootfs-$ARCH/usr/bin/madshelf.sh

echo "::sysinit:/etc/init.d/rcS
:2345:respawn:/bin/sh
::respawn:Xfbdev -nocursor -wr -ac -noreset -nolisten inet6 -keybd evdev,,device=/dev/event0,XkbRules=evdev
::respawn:madshelf.sh
::reboot:/etc/init.d/rc 6
::shutdown:/etc/init.d/rc 0" > /rootfs-$ARCH/etc/inittab
sed -e '1d' < /rootfs-$ARCH/etc/passwd > /rootfs-$ARCH/etc/passwd2
echo "root:scKY2GQGBG3Nc:0:0:root:/root:/bin/sh" > /rootfs-$ARCH/etc/passwd
cat /rootfs-$ARCH/etc/passwd2 >> /rootfs-$ARCH/etc/passwd
rm /rootfs-$ARCH/etc/passwd2

ln -sf /proc/mounts /rootfs-$ARCH/etc/mtab

echo '#!/bin/sh

if [ -z $ACTION ] || [ $ACTION = "add" ] ; then
	for i in /dev/mmcblk*
	do
		D1=`echo $i | sed -e s/p[0-9]*//`
		D2="/dev/"`echo $MDEV | sed -e s/p[0-9]*//`
		if [ $D1 != $D2 ]
		then
			umount $i
			rm -f $i
		fi
	done

	mount -o sync,iocharset=utf8 /dev/$MDEV /media/sd

	killall -HUP madshelf
	exit 0
fi

if [ $ACTION = "remove" ] ; then
	umount -fl /dev/$MDEV
	killall -HUP madshelf
	exit 0
fi

echo "Unknown action. This script must be called by mdev!"
exit 1
' > /rootfs-$ARCH/sbin/automount.sh
chmod a+x /rootfs-$ARCH/sbin/automount.sh

echo '#!/bin/sh

do_power_supply() {
        if [ x"$ACTION" = x"change" -a x"$POWER_SUPPLY_NAME" = x"usb" ]; then
                if [ $POWER_SUPPLY_ONLINE -eq 1 ]; then
                        echo 0 > /sys/power/autosuspend
                else
                        echo 1 > /sys/power/autosuspend
                fi
        fi
}


case $1 in
        power_supply)
                do_power_supply
                ;;
esac

exec /sbin/mdev' > /rootfs-$ARCH/sbin/oi-hotplug.sh
chmod a+x /rootfs-$ARCH/sbin/oi-hotplug.sh

# FIXME!

sed -i -e 's,echo /sbin/mdev,echo /sbin/oi-hotplug.sh,' /rootfs-$ARCH/etc/init.d/mdev

echo "mmcblk[0-9]p[0-9] 0:0 0660 */sbin/automount.sh
mmcblk[0-9]* 0:0 0660 */sbin/automount.sh" > /rootfs-$ARCH/etc/mdev.conf

if [ "$MODE" = "nfsroot" ]; then
    echo "eink_apollofb
g_ether
lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
else
    echo "lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
fi

mkdir -p /rootfs-$ARCH/mnt/storage
mkdir -p /rootfs-$ARCH/media/sd

if [ "$MODE" != "nfsroot" ]; then
    echo "tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/run tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0
tmpfs /var/log tmpfs defaults 0 0
/dev/mtdblock4 /mnt/storage vfat iocharset=utf8 0 0" > /rootfs-$ARCH/etc/fstab

    rm -rf /rootfs-$ARCH/var/log/*
    # Apt goes awry if log directory does not exist.
    mkdir -p /rootfs-$ARCH/var/log/apt
fi

mkdir /rootfs-$ARCH/etc/modprobe.d

echo "auto lo
iface lo inet loopback

auto usb0
iface usb0 inet static
	address 192.168.111.1
	netmask 255.255.255.0
	broadcast 192.168.111.255
" > /rootfs-$ARCH/etc/network/interfaces

touch /rootfs-$ARCH/etc/mdev.conf

echo '<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
	<!-- V3 specific font directories -->
	<dir>/media/sd/fonts</dir>
	<dir>/mnt/storage/fonts</dir>
</fontconfig>' > /rootfs-$ARCH/etc/fonts/conf.avail/55-v3.conf
ln -sf ../conf.avail/55-v3.conf /rootfs-$ARCH/etc/fonts/conf.d/55-v3.conf

ROOTFS=$WORK_DIR/rootfs$KERNEL_FLAVOUR-armel.tar

cross-pack-rootfs $ARCH $ROOTFS

if [ "$MODE" = "nfsroot" ]; then
    cp $ROOTFS "$OUTPUT_DIR/$OUTPUT_NAME.tar"
    bzip2 -9 "$OUTPUT_DIR/$OUTPUT_NAME.tar"
fi

if [ $MODE = "install" ]; then
    cross-shell $ARCH apt-get -y --force-yes install linux-image-${LINUX_VERSION}$KERNEL_FLAVOUR

    mkdir -p $WORK_DIR/rootfs
    (cd $WORK_DIR/rootfs && sudo tar xf $ROOTFS)

    case $DEVICE in
        v3)
            ERASEBLOCK=16384
            PAGESIZE=512;;
        v3ext)
            ERASEBLOCK=131072
            PAGESIZE=2048;;
        *)
            echo "Unknown device: $DEVICE"
            exit 1
    esac

    sudo mkfs.jffs2 -l -n -e $ERASEBLOCK -s $PAGESIZE --faketime -r $WORK_DIR/rootfs -o $WORK_DIR/rootfs.jffs2

    mkv3update --write-oi=$WORK_DIR/V3update.bin /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}$KERNEL_FLAVOUR +$WORK_DIR/rootfs.jffs2

    (cd $WORK_DIR; tar c V3update.bin) | bzip2 > "$OUTPUT_DIR/$OUTPUT_NAME.tar.bz2"
    zip -j $OUTPUT_DIR/$OUTPUT_NAME.zip $WORK_DIR/V3update.bin
fi

if [ "$MODE" = "live" ]; then
    cd $WORK_DIR
    cross-shell $ARCH apt-get -y --force-yes install linux-image-${LINUX_VERSION}-v3
    cp /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}-v3 .

    # Creates $WORK_DIR/initrd.gz
    mkinitramfs-v3

    # Consumes $ROOTFS, generates $WORK_DIR/rootfs.ext2
    (cd $WORK_DIR; mkrootfs.ext2 $ROOTFS)

    mkdir -p $WORK_DIR/openinkpot

    mv $WORK_DIR/initrd.gz $WORK_DIR/rootfs.ext2 $WORK_DIR/vmlinuz-${LINUX_VERSION}-v3 $WORK_DIR/openinkpot

    echo "#!/bin/sh
insmod /mnt/openinkpot/reloaded.ko kernel=/mnt/openinkpot/vmlinuz-${LINUX_VERSION}-v3 initrd=/mnt/openinkpot/initrd.gz
" > $WORK_DIR/openinkpot/boot-OI-V3.exe.fb2

    wget -O $WORK_DIR/openinkpot/reloaded.ko http://openinkpot.org/pub/contrib/v3all-reloaded/reloaded.ko

    (cd $WORK_DIR; tar cv openinkpot/ | bzip2 -9 > $OUTPUT_DIR/$OUTPUT_NAME.tar.bz2)
    (cd $WORK_DIR; zip -r $OUTPUT_DIR/$OUTPUT_NAME.zip openinkpot)
fi
