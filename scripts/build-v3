#!/bin/sh
set -e

LINUX_VERSION='2.6.29'
MODE=install
DEVICE=v3
VERSION=$(date +%Y%m%d)

KEEP_WORKDIR=0

set_device() {
    case "$1" in
        v3|v3ext|v3all) DEVICE="$1";;
        n516) DEVICE="$1";;
        *) echo "Unknown device: $1"; exit 1;;
    esac
}

set_mode() {
    case "$1" in
        install|live|nfsroot) MODE="$1";;
        *) echo "Unknown mode: $1"; exit 1;;
    esac
}

usage() {
    echo "Usage: build-fw [--keep-workdir]"
    echo "    [(-d |--device=)(v3|v3ext|v3all|n516)]"
    echo "    [(-m |--mode=)(install|live|nfsroot)]"
    echo "    [<version>]"
    echo
    echo "device defaults to 'v3',"
    echo "mode defaults to 'install',"
    echo "version defaults to today's snapshot."
}

TMP=$(getopt -l help,keep-workdir,device:,mode: -o hd:m: -- "$@")

if [ $? != 0 ]; then
    exit 1
fi

eval set -- "$TMP"

while true; do
    case "$1" in
        --keep-workdir) KEEP_WORKDIR=1; shift;;
        -d|--device) set_device "$2"; shift; shift;;
        -m|--mode) set_mode "$2"; shift; shift;;
        -h|--help) usage; exit 0;;
        --) shift; break;;
        *) echo "Unexpected argument in getopt parsing: $1"; exit 1;;
    esac
done

if [ $# -gt 1 ]; then
    usage
    exit 1
fi

if [ $# -eq 1 ]; then
    VERSION="$1"
fi

if [ $MODE = "live" ] && ( [ $DEVICE = "v3" ] || [ $DEVICE = "v3ext" ] ); then
    echo "Warning: Selecting v3all instead of v3 or v3ext for OI-on-SD"
    DEVICE=v3all
fi

case "$MODE-$DEVICE" in
    nfsroot-v3|nfsroot-n516) :;;
    nfsroot-*) echo "Error: only v3 is supported for nfsroot";  exit 1;;
    *) ;;
esac

case $DEVICE in
    v3|v3all) KERNEL_FLAVOUR=-v3;;
    v3ext) KERNEL_FLAVOUR=-v3ext;;
    n516) KERNEL_FLAVOUR=-n516;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

if [ $MODE = nfsroot ]; then
    KERNEL_FLAVOUR="-nfsroot${KERNEL_FLAVOUR}"
fi

case $DEVICE in
    v3|v3ext|v3all) MANUFACTURER=hanlin;;
    n516) MANUFACTURER=hanvon;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

case $DEVICE in
    v3|v3ext|v3all) ARCH=armel;;
    n516) ARCH=mipsel;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

HOSTARCH=$(dpkg --print-architecture)

# --

OUTPUT_DIR=$(pwd)/output/"$VERSION"
mkdir -p "$OUTPUT_DIR"

OUTPUT_NAME=oi-$MANUFACTURER-$DEVICE-$MODE-$VERSION

WORK_DIR=$(pwd)/$(mktemp build-fw.XXXXXXXX -d)
cleanup() {
    RETCODE=$?
    [ -z "$WORK_DIR" ] || sudo rm -rf "$WORK_DIR"
    return $RETCODE
}
if [ $KEEP_WORKDIR -eq 0 ]; then
    trap cleanup 0
fi

# --

PATH=$PATH:/usr/sbin


do_pack_n516_firmware() {
	sudo mkfs.ubifs -o $WORK_DIR/rootfs.ubi -d $WORK_DIR/rootfs -m 2048 -e 126KiB -c 4096 -x favor_lzo -X 10 -v
	echo "[waveforms]
mode=ubi
image=$WORK_DIR/metronome.wbf
vol_id=1
vol_size=100KiB
vol_type=dynamic
vol_name=waveforms

[bootsplash]
mode=ubi
image=$WORK_DIR/bootsplash.dat
vol_id=2
vol_size=480000
vol_type=dynamic
vol_name=bootsplash

[errorsplash]
mode=ubi
image=$WORK_DIR/errorsplash.dat
vol_id=3
vol_size=480000
vol_type=dynamic
vol_name=errorsplash

[kernel]
mode=ubi
image=$WORK_DIR/uImage
vol_id=4
vol_size=3MiB
vol_type=dynamic
vol_name=kernel

[rootfs]
mode=ubi
image=$WORK_DIR/rootfs.ubi
vol_id=5
vol_size=122MiB
vol_type=dynamic
vol_name=rootfs

[storage]
mode=ubi
vol_id=6
vol_type=dynamic
vol_name=storage
vol_size=200MiB
vol_flags=autoresize" > $WORK_DIR/n516-ubinize.ini
	wget -O $WORK_DIR/u-boot-nand.bin http://openinkpot.org/pub/contrib/n516-uboot/u-boot-nand.bin

	wget -O $WORK_DIR/errorsplash.dat http://openinkpot.org/pub/contrib/n516-bootsplash/errorsplash.dat
	cp /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}$KERNEL_FLAVOUR $WORK_DIR/uImage

	/usr/sbin/ubinize -v -o $WORK_DIR/ubi.img -p 128KiB -s 512 -m 2048 $WORK_DIR/n516-ubinize.ini

	echo "[DEFAULT]
device=n516
hwrev=1.0
date=`date +%s`

# global properties
[GLOBAL]
description=OI firmware for N516.

[waveforms]
filename=$WORK_DIR/metronome.wbf

[bootsplash]
filename=$WORK_DIR/bootsplash.dat

[errorsplash]
filename=$WORK_DIR/errorsplash.dat

[kernel]
filename=$WORK_DIR/uImage

[rootfs]
filename=$WORK_DIR/rootfs.ubi
" > $WORK_DIR/n516-mkfw.cfg

	echo "[DEFAULT]
device=n516
hwrev=1.0
date=`date +%s`

# global properties
[GLOBAL]
description=OI firmware for N516. Raw version.

[UBI]
filename=$WORK_DIR/ubi.img
raw=yes

[uboot]
filename=$WORK_DIR/u-boot-nand.bin
raw=yes
" > $WORK_DIR/n516-mkfw-raw.cfg

	mk-oifw $WORK_DIR/n516-mkfw.cfg $OUTPUT_DIR/$OUTPUT_NAME-update.oifw
	mk-oifw $WORK_DIR/n516-mkfw-raw.cfg $OUTPUT_DIR/$OUTPUT_NAME-update-raw.oifw


	pushd $WORK_DIR

	for i in `seq 1 1024`; do echo -ne "\xff" >> $WORK_DIR/ff-1k.bin; done
	for i in `seq 1 1024`; do cat $WORK_DIR/ff-1k.bin >> $WORK_DIR/ff-1M.bin; done
	cat u-boot-nand.bin ff-1M.bin > tmp1
	dd if=tmp1 of=tmp2 bs=1M count=1
	cat tmp2 uImage ff-1M.bin ff-1M.bin ff-1M.bin ff-1M.bin > tmp3
	dd if=tmp3 of=tmp4 bs=1M count=1
	cat tmp4 ubi.img > n516-image.bin

	wget http://openinkpot.org/pub/contrib/n516-usbboot/n516-usbboot.zip
	unzip n516-usbboot.zip
	mv n516-image.bin n516-usbboot/
	zip -r $OUTPUT_DIR/$OUTPUT_NAME-flashimage.zip n516-usbboot

	popd
}


#
# FIXME: this script is steaming pile of shit.
#

# Basic stuff
PACKAGES="mdev autosuspend-support dropbear"

# Kernel
PACKAGES="$PACKAGES linux-modules-${LINUX_VERSION}${KERNEL_FLAVOUR}"
if [ "$MODE" = nfsroot ]; then
    PACKAGES="$PACKAGES linux-image-${LINUX_VERSION}${KERNEL_FLAVOUR}"
    PACKAGES="$PACKAGES boot-local-kernel"
fi

# GUI
PACKAGES="$PACKAGES nulldm xserver-xfbdev libewl1-engines-all libevas-engines fontconfig"

# Fonts
PACKAGES="$PACKAGES liberation-fonts libertine-fonts dejavu-fonts droid-fonts"

# i18n
PACKAGES="$PACKAGES gconv-data-basic"

# Applications
PACKAGES="$PACKAGES madshelf libextractor-oi-extras"
PACKAGES="$PACKAGES fbreader"
PACKAGES="$PACKAGES locopdf"
PACKAGES="$PACKAGES cr3"
PACKAGES="$PACKAGES madeye"
PACKAGES="$PACKAGES etimetool"
case $DEVICE in
	v3|v3ext|v3all)
		PACKAGES="$PACKAGES esplash-data-v3 fbreader-settings-v3 madshelf-settings-v3"
		;;
	n516)
		PACKAGES="$PACKAGES esplash-data-azbooka-n516 fbreader-settings-n516 madshelf-settings-n516 metronomefb-support"
        PACKAGES="$PACKAGES gm epuzzles uk uuwm elock eshutdown language-selector"
		;;
esac

# Debug
PACKAGES="$PACKAGES strace rsync"

# if [ "$MODE" = "nfsroot" ]; then
#     PACKAGES="$PACKAGES gdbserver"
# fi

ARCHIVES=/var/cache/apt/archives

umount_all() {
    if [ -e "$1" ]; then
        sudo find "$1" -type d -print0 | xargs -0 -r -i{} -- sh -c "! mountpoint -q '{}' || (echo 'unmounting {}'; while sudo umount '{}' 2>/dev/null; do :; done)"
    fi
}

umount_all /rootfs-$HOSTARCH
umount_all /rootfs-$ARCH

sudo rm -rf /rootfs-$HOSTARCH
sudo rm -rf /rootfs-$ARCH

cross-bootstrap-host
cross-bootstrap-target $ARCH

echo "deb http://ftp.iplinux.org/iplinux asimov core security gui media" > /rootfs-$ARCH/etc/apt/sources.list
echo "deb http://openinkpot.org/pub/oi asimov core security gui media" >> /rootfs-$ARCH/etc/apt/sources.list

cross-shell $ARCH apt-get update
cross-shell $ARCH apt-get -y --force-yes dist-upgrade
cross-shell $ARCH apt-get -y --force-yes install $PACKAGES

case $DEVICE in
    v3|v3ext|v3all)
        echo "echo 200 > /sys/class/graphics/fb0/defio_delay" >> /rootfs-$ARCH/etc/init.d/rcS;;
    n516)
    ;;
    *)
        :;;
esac

echo "#!/bin/sh
HOME=/home DISPLAY=:0 exec madshelf" > /rootfs-$ARCH/usr/bin/madshelf.sh
chmod a+x /rootfs-$ARCH/usr/bin/madshelf.sh

server_args="-nocursor -wr -ac -noreset -nolisten inet6 -keybd evdev,,device=/dev/event0"

case $DEVICE in
    v3|v3ext|v3all)
        server_args="$server_args -screen 600x800 -dpi 170";;
    n516)
        server_args="$server_args -fb /dev/fb1 -screen 800x600@270 -dpi 200";;
    *)
        :;;
esac

echo "SERVER_ARGS=\"$server_args\"" > /rootfs-$ARCH/etc/default/nulldm

# Temporary workaround, until proper Xsession support is introduced
echo "#!/bin/sh
uuwm&" > /rootfs-$ARCH/etc/X11/Xsession.d/05uuwm
chmod +x /rootfs-$ARCH/etc/X11/Xsession.d/05uuwm

echo "#!/bin/sh
exec /usr/bin/gm" > /rootfs-$ARCH/etc/X11/Xsession.d/99gm
chmod +x /rootfs-$ARCH/etc/X11/Xsession.d/99gm

echo "#!/bin/sh
uk&" > /rootfs-$ARCH/etc/X11/Xsession.d/50uk
chmod +x /rootfs-$ARCH/etc/X11/Xsession.d/50uk

echo "::sysinit:/etc/init.d/rcS
:2345:respawn:/bin/sh
::shutdown:/etc/init.d/rc 0" > /rootfs-$ARCH/etc/inittab

echo 'root:scKY2GQGBG3Nc:0:0:root:/root:/bin/sh' > /rootfs-$ARCH/etc/passwd

# Humm??
ln -sf /proc/mounts /rootfs-$ARCH/etc/mtab

echo '#!/bin/sh

if [ -z $ACTION ] || [ $ACTION = "add" ] ; then
	if [ -e /var/lib/usbwatcher/state ]; then
		. /var/lib/usbwatcher/state
		if [ x"$STATE" = x"mass_storage" ]; then
			exit 0;
		fi
	fi

	for i in /dev/mmcblk*
	do
		D1=`echo $i | sed -e s/p[0-9]*//`
		D2="/dev/"`echo $MDEV | sed -e s/p[0-9]*//`
		if [ $D1 != $D2 ]
		then
			umount $i
			rm -f $i
		fi
	done

	mount -o sync,iocharset=utf8 /dev/$MDEV /media/sd

	killall -HUP madshelf
	exit 0
fi

if [ $ACTION = "remove" ] ; then
	umount -fl /dev/$MDEV
	killall -HUP madshelf
	exit 0
fi

echo "Unknown action. This script must be called by mdev!"
exit 1
' > /rootfs-$ARCH/sbin/automount.sh
chmod a+x /rootfs-$ARCH/sbin/automount.sh

echo '#!/bin/sh

exec </dev/null >/dev/null 2>/dev/null
export USER=root

do_power_supply() {
        if [ x"$ACTION" = x"change" -a x"$POWER_SUPPLY_NAME" = x"usb" ]; then
                if [ $POWER_SUPPLY_ONLINE -eq 1 ]; then
                        echo 0 > /sys/power/autosuspend
                else
                        echo 1 > /sys/power/autosuspend
                fi
        fi
}

do_firmware() {
	HOTPLUG_FW_DIR=/lib/firmware

	echo 1 > /sys/$DEVPATH/loading
	cat $HOTPLUG_FW_DIR/$FIRMWARE > /sys/$DEVPATH/data
	echo 0 > /sys/$DEVPATH/loading
}

case $1 in
        power_supply)
                do_power_supply
                ;;
	firmware)
		do_firmware
		;;
esac

for i in /lib/mdev/*
do
	( . $i )
done

exec /sbin/mdev' > /rootfs-$ARCH/sbin/oi-hotplug.sh
chmod a+x /rootfs-$ARCH/sbin/oi-hotplug.sh

# FIXME!

sed -i -e 's,echo /sbin/mdev,echo /sbin/oi-hotplug.sh,' /rootfs-$ARCH/etc/init.d/mdev

echo "mmcblk[0-9]p[0-9] 0:0 0660 */sbin/automount.sh
mmcblk[0-9]* 0:0 0660 */sbin/automount.sh" > /rootfs-$ARCH/etc/mdev.conf

case $DEVICE in
	v3|v3ext|v3all)
		if [ "$MODE" = "nfsroot" ]; then
			echo "eink_apollofb
g_ether
lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
		else
			echo "lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
		fi
		;;
	n516)
		echo "lm75
jz4740_udc
g_ether" > /rootfs-$ARCH/etc/modules
		;;
esac


mkdir -p /rootfs-$ARCH/mnt/storage
mkdir -p /rootfs-$ARCH/media/sd

if [ "$MODE" != "nfsroot" ]; then
    echo "tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/run tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0
tmpfs /var/log tmpfs defaults 0 0" > /rootfs-$ARCH/etc/fstab

case $DEVICE in
	v3|v3ext|v3all)
		echo "/dev/mtdblock4 /mnt/storage vfat iocharset=utf8 0 0" >> /rootfs-$ARCH/etc/fstab;;
esac

    rm -rf /rootfs-$ARCH/var/log/*
    # Apt goes awry if log directory does not exist.
    mkdir -p /rootfs-$ARCH/var/log/apt
fi

mkdir /rootfs-$ARCH/etc/modprobe.d

iface=usb0
#[ "$DEVICE" == "n516" ] && iface=eth0

echo "auto lo
iface lo inet loopback

auto $iface
iface $iface inet static
	address 192.168.111.1
	netmask 255.255.255.0
	broadcast 192.168.111.255
	gateway 192.168.111.2
" > /rootfs-$ARCH/etc/network/interfaces

echo 'nameserver 192.168.111.2' > /rootfs-$ARCH/etc/resolv.conf

touch /rootfs-$ARCH/etc/mdev.conf

echo '<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
	<!-- V3 specific font directories -->
	<dir>/media/sd/fonts</dir>
	<dir>/mnt/storage/fonts</dir>
</fontconfig>' > /rootfs-$ARCH/etc/fonts/conf.avail/55-v3.conf
ln -sf ../conf.avail/55-v3.conf /rootfs-$ARCH/etc/fonts/conf.d/55-v3.conf

case $DEVICE in
	n516)

        # Fixme: should be moved to fb-halt package
        
        START_SHUTDOWN_IMG=/usr/share/esplash-data/start-shutdown
        SHUTDOWN_IMG=/usr/share/esplash-data/shutdown

        python -c 'import sys
for i in range(480000): sys.stdout.write("\xff")' > /rootfs-$ARCH/$SHUTDOWN_IMG
        lzma -9 /rootfs-$ARCH/$SHUTDOWN_IMG

        echo "#!/bin/sh

case \"\$1\" in
  stop)
    lzmacat $SHUTDOWN_IMG.lzma > /dev/fb1;;
  start|force-reload)
     ;;
  *)
    echo \"Usage: fb-halt {start|stop|force-reload}\"
    ;;
esac
exit 0
" > /rootfs-$ARCH/etc/init.d/fb-halt

        chmod 755 /rootfs-$ARCH/etc/init.d/fb-halt
        ln -s /etc/init.d/fb-halt /rootfs-$ARCH/etc/rc0.d/K01fb-halt

        #
        # Pre-generation of most used locales
        #
        for i in ru_RU uk_UA en_US; do
            lzcat /rootfs-$ARCH/usr/lib/locale-archive/main.tar.lzma | tar -x -C /rootfs-$ARCH/usr/lib/locale $i.UTF-8
        done

        # uk.conf
        echo '124     eshutdown       Power   exec eshutdown
147     gm      Activate exec gm

150     elock   Lock    exec elock
151     elock   Unlock  exec elock' > /rootfs-$ARCH/etc/uk.conf

        ;;
    *)
        ;;
esac

find_file() {
    F="$1"

    if [ -f "$F" ]; then
        echo "$F"
        return
    fi
    if [ -f "logo/$F" ]; then
        echo "logo/$F"
        return
    fi
    if [ -f "oi-build-firmware/logo/$F" ]; then
        echo "oi-build-firmware/logo/$F"
        return
    fi
    if [ -f "../logo/$F" ]; then
        echo "../logo/$F"
        return
    fi
    if [ -f "data/$F" ]; then
        echo "data/$F"
        return
    fi
    if [ -f "oi-build-firmware/data/$F" ]; then
        echo "oi-build-firmware/data/$F"
        return
    fi
    if [ -f "../data/$F" ]; then
        echo "../data/$F"
        return
    fi
    if [ -f "/usr/share/oi-build-firmware/$F" ]; then
        echo "/usr/share/oi-build-firmware/$F" 
        return
    fi
}

case $DEVICE in
    n516)
        # Bootloader
        F_AZ=$(find_file azbooka-splash.png)
        mk-rawpic -r270 -d3 --high $F_AZ $WORK_DIR/bootsplash.dat

        # Pre-created dropbear keys
        DSA_K=$(find_file dropbear_dss_host_key)
        cp "$DSA_K" /rootfs-$ARCH/etc/dropbear/dropbear_dss_host_key
        RSA_K=$(find_file dropbear_rsa_host_key)
        cp "$RSA_K" /rootfs-$ARCH/etc/dropbear/dropbear_rsa_host_key
        chmod 600 /rootfs-$ARCH/etc/dropbear/*
    ;;
    *)
    ;;
esac


## Devs' public SSH keys

mkdir /rootfs-$ARCH/root/.ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxjLCnn16+oXa4Iz1AbSQjbySOU9aPrSp/Cg9G2W0onqzrfhHXLvFptCgB4R3uuK0+yi5cD6j87IjU1sCcoj+TJ4qjIVr3ToivBNynWWFSVAvK6x0V8qVqkumkiHco88PQ1X6u8q7tnEjuMilT0EUgThHpaF90sTPcn9XoXsXXzrtn57mZXmkLi53PVGDtCvr1Rhzex+ANnMhgvKIGL2/H8fq6uJDg6/wKp8/7p1xCw9Z+xdrhIe8JJddDJgqSGUuomiZRyUO3pzZcKXm27lGgak+1iWoZ5nUygObsCfuzZcDZZIrNR3Pi6tMdM/I/zzm1mT/EEaXVP/Bvi78nIdp4w== dottedmag@frontier" >> /rootfs-$ARCH/root/.ssh/authorized_keys
echo "ssh-dss AAAAB3NzaC1kc3MAAACBAIkd+DovHuSNRiOdYGn4o693zCMDhcZfvhKQYE9XI+cZZyj+Xr8YP0FpH/oZc0ecrYvj3ZPv6HnuxSnM9An7MLXmJ+318r7YJFJf7wSTMbVB/PXu09Hq8SwdasOAxasF7USqvBOgCon4Ur7Lgozw0wtga7tPmMcVWlfx1YxztTjVAAAAFQDGjsMALZa/BXsNifRZZU0B7LfhBwAAAIAG6crXAqoi9XnNlthfhboXe87nmrNoo5llRO4Hh3QF4BW5bTr2O4UMEu+2LZgcyYnoTnG/HNuCZnq1QOj6uytg/2n72QQ6g21R8v+1R/9eLroWEEGlNg9RmqzE+5quJtEs/6OhA3ZhcW4mv2IuIsLK2XyaY0N9cKC3wfmLxbTlWQAAAIBRwGOmILrf/Tn+U6LuHMs6ASywkaNoqRavkbFSV6OORmNgThyS1W0qpL1UIY0ngAmXVKowwKUW0+4xchSwf4pU0ZEDQbSxTMpgIuUYnPj9aC3XBo2ZbRvgRiVkPYPUe6YDu7QF7sHjfVYjheaqnwMT6FMg4PzCVQBdRimHjL/D6Q== jek@jeknote" >> /rootfs-$ARCH/root/.ssh/authorized_keys
echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAKEAw40U+FSOuNbEuwl4jhwavRI30wiBFbM6ysoSDncHG6q2dr5N4/enSipW+ZxpX0CssOxNCkqXTSYQodXrQ8s7nTsmCZZOjj1rs3N3xFALIt9HtTEy63mqEhtyO8oDY/gF2zfg1isRG7eAODl0FzQfbFVCKC4IzlJ+pw8IfnSIYifDCFLojzPhyX5qr8FzDZVerjXFFGbN36bK2whYNxFJfw== alex@hosaka.homeunix.net
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxFs13kmyuxFYSC6O3GMc/vxR+XQyfgUmsrIE7jAtdtbsS7vGYS9NAsK5ZNoGK5EuQwi3ahqFpKkLkN754ymXjc2Axjpif59C78njbx+l9MYFW7fpvU58QfurPdxinAcvTsvcFrQSbdtNZxgerFK+JBWlfrcZmhWYZsO/wtW0xz5IFg8z4n5L2GwvQ0Url0DhkfRhMt8Dn/5KYO5ukCaqlXYJSlPt053qx80N6fdeQx4WKTWDegEaOG+czvs1+E+Pa9TMM2QXdXuJm1kHB+afCl2TtBwkKQu05/MlJkEumDKwqHkkvl4DmhHvxfuhcvhapNijY+H51ZJF5YHHfAZkSQ== alex@ws22" >> /rootfs-$ARCH/root/.ssh/authorized_keys

chmod 700 /rootfs-$ARCH/root/.ssh
chmod 600 /rootfs-$ARCH/root/.ssh/authorized_keys

# /keys


ROOTFS=$WORK_DIR/rootfs$KERNEL_FLAVOUR-$ARCH.tar

cross-pack-rootfs $ARCH $ROOTFS

if [ "$MODE" = "nfsroot" ]; then
    cp $ROOTFS "$OUTPUT_DIR/$OUTPUT_NAME.tar"
    bzip2 -9 "$OUTPUT_DIR/$OUTPUT_NAME.tar"
fi

if [ $MODE = "install" ]; then
    cross-shell $ARCH apt-get -y --force-yes install linux-image-${LINUX_VERSION}$KERNEL_FLAVOUR

    mkdir -p $WORK_DIR/rootfs
    (cd $WORK_DIR/rootfs && sudo tar xf $ROOTFS)

    case $DEVICE in
        v3)
            ERASEBLOCK=16384
            PAGESIZE=512;;
        v3ext)
            ERASEBLOCK=131072
            PAGESIZE=2048;;
	n516)
	    wget -O $WORK_DIR/metronome.wbf http://openinkpot.org/pub/contrib/n516-waveforms/default.wbf
	    sudo mkdir -p $WORK_DIR/rootfs/lib/firmware
	    sudo cp $WORK_DIR/metronome.wbf $WORK_DIR/rootfs/lib/firmware/

	    do_pack_n516_firmware
	    #FIXME: go to finish more clearly
	    exit 0;;
        *)
            echo "Unknown device: $DEVICE"
            exit 1
    esac

    sudo mkfs.jffs2 -l -n -e $ERASEBLOCK -s $PAGESIZE --faketime -r $WORK_DIR/rootfs -o $WORK_DIR/rootfs.jffs2

    mkv3update --write-oi=$WORK_DIR/V3update.bin /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}$KERNEL_FLAVOUR +$WORK_DIR/rootfs.jffs2
    sync
    (cd $WORK_DIR; tar c V3update.bin) | bzip2 > "$OUTPUT_DIR/$OUTPUT_NAME.tar.bz2"
    zip -j $OUTPUT_DIR/$OUTPUT_NAME.zip $WORK_DIR/V3update.bin
fi

if [ "$MODE" = "live" ]; then
    cd $WORK_DIR
    cross-shell $ARCH apt-get -y --force-yes install linux-image-${LINUX_VERSION}-v3
    cp /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}-v3 .

    # Creates $WORK_DIR/initrd.gz
    mkinitramfs-v3

    # Consumes $ROOTFS, generates $WORK_DIR/rootfs.ext2
    (cd $WORK_DIR; mkrootfs.ext2 $ROOTFS)

    mkdir -p $WORK_DIR/openinkpot

    mv $WORK_DIR/initrd.gz $WORK_DIR/rootfs.ext2 $WORK_DIR/vmlinuz-${LINUX_VERSION}-v3 $WORK_DIR/openinkpot

    echo "#!/bin/sh
insmod /mnt/openinkpot/reloaded.ko kernel=/mnt/openinkpot/vmlinuz-${LINUX_VERSION}-v3 initrd=/mnt/openinkpot/initrd.gz
" > $WORK_DIR/openinkpot/boot-OI-V3.exe.fb2

    wget -O $WORK_DIR/openinkpot/reloaded.ko http://openinkpot.org/pub/contrib/v3all-reloaded/reloaded.ko

    (cd $WORK_DIR; tar cv openinkpot/ | bzip2 -9 > $OUTPUT_DIR/$OUTPUT_NAME.tar.bz2)
    (cd $WORK_DIR; zip -r $OUTPUT_DIR/$OUTPUT_NAME.zip openinkpot)
fi
