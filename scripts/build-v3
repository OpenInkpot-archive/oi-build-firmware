#!/bin/sh
set -e

MODE=install
DEVICE=v3
VERSION=$(date +%Y%m%d)

KEEP_WORKDIR=0
SKIP_BOOTSTRAP=0

set_device() {
    case "$1" in
        v3|v3ext|v3all) DEVICE="$1";;
        *) echo "Unknown device: $1"; exit 1;;
    esac
}

set_mode() {
    case "$1" in
        install|live|nfsroot) MODE="$1";;
        *) echo "Unknown mode: $1"; exit 1;;
    esac
}

set_device v3
set_mode install

usage() {
    echo "Usage: build-v3 [--skip-bootstrap] [--keep-workdir]"
    echo "    [(-d |--device=)(v3|v3ext|v3all)]"
    echo "    [(-m |--mode=)(install|live|nfsroot)]"
    echo "    [<version>]"
    echo
    echo "device defaults to 'v3',"
    echo "mode defaults to 'install',"
    echo "version defaults to today's snapshot."
}

TMP=$(getopt -l help,skip-bootstrap,keep-workdir,device:,mode: -o hd:m: -- "$@")

if [ $? != 0 ]; then
    exit 1
fi

eval set -- "$TMP"

while true; do
    case "$1" in
        --skip-bootstrap) SKIP_BOOTSTRAP=1; shift;;
        --keep-workdir) KEEP_WORKDIR=1; shift;;
        -d|--device) set_device "$2"; shift; shift;;
        -m|--mode) set_mode "$2"; shift; shift;;
        -h|--help) usage; exit 0;;
        --) shift; break;;
        *) echo "Unexpected argument in getopt parsing: $1"; exit 1;;
    esac
done

if [ $# -gt 1 ]; then
    usage
    exit 1
fi

if [ $# -eq 1 ]; then
    VERSION="$1"
fi

if [ $MODE = "live" ] && ( [ $DEVICE = "v3" ] || [ $DEVICE = "v3ext" ] ); then
    echo "Warning: Selecting v3all instead of v3 or v3ext for OI-on-SD"
    DEVICE=v3all
fi

if [ $MODE = "nfsroot" ] && [ $DEVICE != "v3" ]; then
    echo "Error: only v3 is supported for nfsroot"
    exit 1
fi

case $DEVICE in
    v3|v3all) KERNEL_FLAVOUR=-v3;;
    v3ext) KERNEL_FLAVOUR=-v3ext;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

case $DEVICE in
    v3|v3ext|v3all) MANUFACTURER=hanlin;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

# --

OUTPUT_DIR=$(pwd)/output/"$VERSION"
mkdir -p "$OUTPUT_DIR"

OUTPUT_NAME=oi-$MANUFACTURER-$DEVICE-$MODE-$VERSION

WORK_DIR=$(pwd)/$(mktemp build-v3.XXXXXXXX -d)
cleanup() {
    RETCODE=$?
    [ -z "$WORK_DIR" ] || sudo rm -rf "$WORK_DIR"
    return $RETCODE
}
if [ $KEEP_WORKDIR -eq 0 ]; then
    trap cleanup 0
fi

# --

PATH=$PATH:/usr/sbin

#
# FIXME: this script is steaming pile of shit.
#

PACKAGES="mdev fbreader xserver-xfbdev"

if [ $SKIP_BOOTSTRAP -eq 1 ]; then
    shift
else
    if [ "$MODE" = "nfsroot" ]; then
        PACKAGES="$PACKAGES linux-image-2.6.25-nfsroot$KERNEL_FLAVOUR-armel linux-modules-2.6.25-nfsroot$KERNEL_FLAVOUR"
        PACKAGES="$PACKAGES kexec-tools boot-local-kernel"
        PACKAGES="$PACKAGES gdbserver"
    else
        PACKAGES="$PACKAGES linux-modules-2.6.25$KERNEL_FLAVOUR"
    fi

    PACKAGES="$PACKAGES liberation-fonts libewl libewl-engines-all libevas-engine-software-xcb"
    PACKAGES="$PACKAGES madshelf libextractor-oi-extras"
    PACKAGES="$PACKAGES fbreader"

    ARCH=armel

    ARCHIVES=/var/cache/apt/archives
    while sudo umount /rootfs-i386$ARCHIVES 2>/dev/null; do :; done
    sudo rm -rf /rootfs-i386
    while sudo umount /rootfs-$ARCH$ARCHIVES 2>/dev/null; do :; done
    sudo rm -rf /rootfs-$ARCH

    sc-bootstrap-host
    sc-bootstrap-target $ARCH

    echo "deb http://openinkpot.org/pub/SLIND clydesdale core security debug gui media" > /rootfs-$ARCH/etc/apt/sources.list

    cross-shell sh $ARCH apt-get update
    cross-shell sh $ARCH apt-get -y --force-yes dist-upgrade
    cross-shell sh $ARCH apt-get -y --force-yes install $PACKAGES

    echo "echo 200 > /sys/class/graphics/fb0/defio_delay" >> /rootfs-$ARCH/etc/init.d/rcS

    echo "#!/bin/sh
HOME=/home DISPLAY=:0 exec madshelf" > /rootfs-$ARCH/usr/bin/madshelf.sh
    chmod a+x /rootfs-$ARCH/usr/bin/madshelf.sh

    echo "::sysinit:/etc/init.d/rcS
#:2345:respawn:/bin/sh
::respawn:Xfbdev -nocursor -wr -ac -noreset -nolisten inet6 -keybd evdev,,device=/dev/event0,XkbRules=evdev
::respawn:madshelf.sh" > /rootfs-$ARCH/etc/inittab
    sed -e '1d' < /rootfs-$ARCH/etc/passwd > /rootfs-$ARCH/etc/passwd2
    echo "root:scKY2GQGBG3Nc:0:0:root:/root:/bin/sh" > /rootfs-$ARCH/etc/passwd
    cat /rootfs-$ARCH/etc/passwd2 >> /rootfs-$ARCH/etc/passwd
    rm /rootfs-$ARCH/etc/passwd2

    ln -sf /proc/mounts /rootfs-$ARCH/etc/mtab

    echo '#!/bin/sh

if [ -z $ACTION ] || [ $ACTION = "add" ] ; then
	for i in /dev/mmcblk*
	do
		D1=`echo $i | sed -e s/p[0-9]*//`
		D2="/dev/"`echo $MDEV | sed -e s/p[0-9]*//`
		if [ $D1 != $D2 ]
		then
			umount $i
			rm -f $i
		fi
	done

	mount -o sync,iocharset=utf8 /dev/$MDEV /mnt

	killall -HUP madshelf
	exit 0
fi

if [ $ACTION = "remove" ] ; then
	umount -fl /dev/$MDEV
	killall -HUP madshelf
	exit 0
fi

echo "Unknown action. This script must be called by mdev!"
exit 1
' > /rootfs-$ARCH/sbin/automount.sh
    chmod a+x /rootfs-$ARCH/sbin/automount.sh

    echo '#!/bin/sh

do_power_supply() {
        if [ x"$ACTION" = x"change" -a x"$POWER_SUPPLY_NAME" = x"usb" ]; then
                if [ $POWER_SUPPLY_ONLINE -eq 1 ]; then
                        echo 0 > /sys/power/autosuspend
                else
                        echo 1 > /sys/power/autosuspend
                fi
        fi
}


case $1 in
        power_supply)
                do_power_supply
                ;;
esac

exec /sbin/mdev' > /rootfs-$ARCH/sbin/oi-hotplug.sh
    chmod a+x /rootfs-$ARCH/sbin/oi-hotplug.sh

    # FIXME!

    sed -i -e 's,echo /sbin/mdev,echo /sbin/oi-hotplug.sh,' /rootfs-$ARCH/etc/init.d/mdev

    echo "mmcblk[0-9]p[0-9] 0:0 0660 */sbin/automount.sh
mmcblk[0-9]* 0:0 0660 */sbin/automount.sh" > /rootfs-$ARCH/etc/mdev.conf

    if [ "$MODE" = "nfsroot" ]; then
        echo "eink_apollofb
g_ether
lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
    else
        echo "lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
    fi

    if [ "$MODE" = "nfsroot" ]; then
    echo "tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/run tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0
tmpfs /var/log tmpfs defaults 0 0" > /rootfs-$ARCH/etc/fstab

    rm -rf /rootfs-$ARCH/var/log/*
    fi

    mkdir /rootfs-$ARCH/etc/modprobe.d

    echo "auto lo
iface lo inet loopback

auto usb0
iface usb0 inet static
	address 192.168.111.1
	netmask 255.255.255.0
	broadcast 192.168.111.255
" > /rootfs-$ARCH/etc/network/interfaces

    touch /rootfs-$ARCH/etc/mdev.conf

fi

ROOTFS=$WORK_DIR/rootfs$KERNEL_FLAVOUR-armel.tar

sc-pack-rootfs $ARCH $ROOTFS

if [ "$MODE" = "nfsroot" ]; then
    cp $ROOTFS "$OUTPUT_DIR/$OUTPUT_NAME.tar"
    bzip2 -9 "$OUTPUT_DIR/$OUTPUT_NAME.tar"
fi

if [ $MODE = "install" ]; then
    sudo apt-get -y --force-yes install oi-v3-build-firmware mtd-tools

    cross-shell sh $ARCH apt-get -y --force-yes install linux-image-2.6.25$KERNEL_FLAVOUR-armel

    mkdir -p $WORK_DIR/rootfs
    (cd $WORK_DIR/rootfs && sudo tar xf $ROOTFS)

    case $DEVICE in
        v3)
            ERASEBLOCK=16384
            PAGESIZE=512;;
        v3ext)
            ERASEBLOCK=131072
            PAGESIZE=2048;;
        *)
            echo "Unknown device: $DEVICE"
            exit 1
    esac

    mkfs.jffs2 -l -n -e $ERASEBLOCK -s $PAGESIZE --faketime -r $WORK_DIR/rootfs -o $WORK_DIR/rootfs.jffs2

    mkv3update --write-oi=$WORK_DIR/V3update.bin /rootfs-$ARCH/boot/vmlinuz-2.6.25$KERNEL_FLAVOUR-armel +$WORK_DIR/rootfs.jffs2

    (cd $WORK_DIR; tar c V3update.bin) | bzip2 > "$OUTPUT_DIR/$OUTPUT_NAME.tar.bz2"
    zip -j $OUTPUT_DIR/$OUTPUT_NAME.zip $WORK_DIR/V3update.bin
fi

if [ "$MODE" = "live" ]; then
    cross-shell sh $ARCH apt-get -y --force-yes install linux-image-2.6.25-v3-armel
    cp /rootfs-$ARCH/boot/vmlinuz-2.6.25-v3-armel $WORK_DIR

    # Creates $WORK_DIR/initrd.gz
    (cd $WORK_DIR; mkinitramfs-v3)

    # Consumes $ROOTFS, generates $WORK_DIR/rootfs.ext2
    (cd $WORK_DIR; mkrootfs.ext2 $ROOTFS)

    mkdir -p $WORK_DIR/openinkpot

    mv $WORK_DIR/initrd.gz $WORK_DIR/rootfs.ext2 $WORK_DIR/vmlinuz-2.6.25-v3-armel $WORK_DIR/openinkpot

    echo '#!/bin/sh
insmod /mnt/openinkpot/reloaded.ko kernel=/mnt/openinkpot/vmlinuz-2.6.25-v3-armel initrd=/mnt/openinkpot/initrd.gz
' > $WORK_DIR/openinkpot/boot-OI-V3.exe.txt

    wget -O $WORK_DIR/openinkpot/reloaded.ko http://openinkpot.org/pub/contrib/v3all-reloaded/reloaded.ko

    (cd $WORK_DIR; tar cv openinkpot/ | bzip2 -9 > $OUTPUT_DIR/$OUTPUT_NAME.tar.bz2)
    (cd $WORK_DIR; zip -r $OUTPUT_DIR/$OUTPUT_NAME openinkpot)
fi
