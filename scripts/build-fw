#!/bin/sh
set -e

LINUX_VERSION='2.6.29'
DEVICE=v3
MODE=install
VARIANT=
VERSION=$(date +%Y%m%d)

KEEP_WORKDIR=0

set_device() {
    case "$1" in
        v3|v3ext|v3all) DEVICE="$1";;
        n516) DEVICE="$1";;
        *) echo "Unknown device: $1"; exit 1;;
    esac
}

set_mode() {
    case "$1" in
        install|live|nfsroot) MODE="$1";;
        *) echo "Unknown mode: $1"; exit 1;;
    esac
}

set_variant() {
    case "$1" in
        azbooka) VARIANT="$1";;
        default) VARIANT=;;
        *) echo "Unknown variant: $1"; exit 1;;
    esac
}

usage() {
    echo "Usage: build-fw [--keep-workdir]"
    echo "    [(-d |--device=)(v3|v3ext|v3all|n516)]"
    echo "    [(-m |--mode=)(install|live|nfsroot)]"
    echo "    [(-a |--variant=)(default|azbooka)]"
    echo "    [<version>]"
    echo
    echo "device defaults to 'v3',"
    echo "mode defaults to 'install',"
    echo "version defaults to today's snapshot,"
    echo "variant defaults to 'default'."
}

TMP=$(getopt -l help,keep-workdir,device:,mode:,variant: -o hd:m:a: -- "$@")

if [ $? != 0 ]; then
    exit 1
fi

eval set -- "$TMP"

while true; do
    case "$1" in
        --keep-workdir) KEEP_WORKDIR=1; shift;;
        -d|--device) set_device "$2"; shift; shift;;
        -m|--mode) set_mode "$2"; shift; shift;;
        -a|--variant) set_variant "$2"; shift; shift;;
        -h|--help) usage; exit 0;;
        --) shift; break;;
        *) echo "Unexpected argument in getopt parsing: $1"; exit 1;;
    esac
done

if [ $# -gt 1 ]; then
    usage
    exit 1
fi

if [ $# -eq 1 ]; then
    VERSION="$1"
fi

if [ $MODE = "live" ] && ( [ $DEVICE = "v3" ] || [ $DEVICE = "v3ext" ] ); then
    echo "Warning: Selecting v3all instead of v3 or v3ext for OI-on-SD"
    DEVICE=v3all
fi

case "$MODE-$DEVICE" in
    nfsroot-v3|nfsroot-n516) :;;
    nfsroot-*) echo "Error: only v3 is supported for nfsroot";  exit 1;;
    *) ;;
esac

case $DEVICE in
    v3|v3all) KERNEL_FLAVOUR=-v3;;
    v3ext) KERNEL_FLAVOUR=-v3ext;;
    n516) KERNEL_FLAVOUR=-n516;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

case "$DEVICE-$VARIANT" in
    n516-azbooka) :;;
    *-azbooka) echo "Error: azbooka variant is supported only for n516"; exit 1;;
    *) ;;
esac

if [ $MODE = nfsroot ]; then
    KERNEL_FLAVOUR="-nfsroot${KERNEL_FLAVOUR}"
fi

case $DEVICE in
    v3|v3ext|v3all) MANUFACTURER=hanlin;;
    n516) MANUFACTURER=hanvon;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

case $DEVICE in
    v3|v3ext|v3all) ARCH=armel;;
    n516) ARCH=mipsel;;
    *) echo "Unknown device: $DEVICE"; exit 1;;
esac

HOSTARCH=$(dpkg --print-architecture)

# --

OUTPUT_DIR=$(pwd)/output/"$VERSION"
mkdir -p "$OUTPUT_DIR"

case "$VARIANT-$DEVICE" in
    -*)
        OUTPUT_NAME=oi-$MANUFACTURER-$DEVICE-$MODE-$VERSION;;
    azbooka-n516)
        OUTPUT_NAME=azbooka516-$VERSION;;
esac

WORK_DIR=$(pwd)/$(mktemp build-fw.XXXXXXXX -d)
cleanup() {
    RETCODE=$?
    [ -z "$WORK_DIR" ] || sudo rm -rf "$WORK_DIR"
    return $RETCODE
}
if [ $KEEP_WORKDIR -eq 0 ]; then
    trap cleanup 0
fi

# --

PATH=$PATH:/usr/sbin

do_pack_n516_firmware() {
    # Fixate atime/mtime for rootfs being built
    sudo find $WORK_DIR/rootfs -type f -print0 | sudo xargs -0 touch -d @0
    sudo find $WORK_DIR/rootfs -depth -type d -print0 | sudo xargs -0 touch -d @0
    sudo mkfs.ubifs -o $WORK_DIR/rootfs.ubi -d $WORK_DIR/rootfs -m 2048 -e 126KiB -c 4096 -x favor_lzo -X 10 -v
    echo "[waveforms]
mode=ubi
image=$WORK_DIR/metronome.wbf
vol_id=1
vol_size=100KiB
vol_type=dynamic
vol_name=waveforms

[bootsplash]
mode=ubi
image=$WORK_DIR/bootsplash.dat
vol_id=2
vol_size=480000
vol_type=dynamic
vol_name=bootsplash

[errorsplash]
mode=ubi
image=$WORK_DIR/errorsplash.dat
vol_id=3
vol_size=480000
vol_type=dynamic
vol_name=errorsplash

[kernel]
mode=ubi
image=$WORK_DIR/uImage
vol_id=4
vol_size=3MiB
vol_type=dynamic
vol_name=kernel

[rootfs]
mode=ubi
image=$WORK_DIR/rootfs.ubi
vol_id=5
vol_size=122MiB
vol_type=dynamic
vol_name=rootfs

[storage]
mode=ubi
image=$WORK_DIR/storage.vfat.fs
vol_id=6
vol_type=dynamic
vol_name=storage
vol_size=388362240" > $WORK_DIR/n516-ubinize.ini
    wget -O $WORK_DIR/u-boot-nand.bin http://openinkpot.org/pub/contrib/n516-uboot/u-boot-nand.bin

    cp /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}$KERNEL_FLAVOUR $WORK_DIR/uImage

    /usr/sbin/ubinize -v -o $WORK_DIR/ubi.img -p 128KiB -s 512 -m 2048 $WORK_DIR/n516-ubinize.ini

    case "$VARIANT" in
        '')
            DESCRIPTION="OpenInkpot for N516.";;
        azbooka)
            DESCRIPTION="Azbooka516 firmware.";;
    esac

    echo "[DEFAULT]
device=n516
hwrev=1.0
date=`date +%s`

# global properties
[GLOBAL]
description=$DESCRIPTION

[bootsplash]
filename=$WORK_DIR/bootsplash.dat

[errorsplash]
filename=$WORK_DIR/errorsplash.dat

[kernel]
filename=$WORK_DIR/uImage

[rootfs]
filename=$WORK_DIR/rootfs.ubi
" > $WORK_DIR/n516-mkfw.cfg

    echo "[DEFAULT]
device=n516
hwrev=1.0
date=`date +%s`

# global properties
[GLOBAL]
description=$DESCRIPTION Reinstall image.

[UBI]
filename=$WORK_DIR/ubi.img
raw=yes

[uboot]
filename=$WORK_DIR/u-boot-nand.bin
raw=yes
" > $WORK_DIR/n516-mkfw-reinstall.cfg

    mk-oifw $WORK_DIR/n516-mkfw.cfg $OUTPUT_DIR/$OUTPUT_NAME-update.oifw
    mk-oifw $WORK_DIR/n516-mkfw-reinstall.cfg $OUTPUT_DIR/$OUTPUT_NAME-reinstall.oifw
    pushd $WORK_DIR

    for i in `seq 1 1024`; do echo -ne "\xff" >> $WORK_DIR/ff-1k.bin; done
    for i in `seq 1 1024`; do cat $WORK_DIR/ff-1k.bin >> $WORK_DIR/ff-1M.bin; done
    cat u-boot-nand.bin ff-1M.bin > tmp1
    dd if=tmp1 of=tmp2 bs=1M count=1
    cat tmp2 uImage ff-1M.bin ff-1M.bin ff-1M.bin ff-1M.bin > tmp3
    dd if=tmp3 of=tmp4 bs=1M count=1
    cat tmp4 ubi.img > n516-image.bin

    wget http://openinkpot.org/pub/contrib/n516-usbboot/n516-usbboot.zip
    unzip n516-usbboot.zip
    mv n516-image.bin n516-usbboot/
    zip -r $OUTPUT_DIR/$OUTPUT_NAME-flashimage.zip n516-usbboot

    popd

    for i in $OUTPUT_DIR/*.oifw; do
        DIR=$(dirname "$i")
        FILE=$(basename "$i")
        (cd "$DIR" && zip -r $OUTPUT_DIR/${FILE%.oifw} "$FILE" && rm "$FILE")
    done
}


#
# FIXME: this script is steaming pile of shit.
#

# Basic stuff
PACKAGES="mdev autosuspend-support dropbear mtd-support"
case $DEVICE in
    v3|v3ext|v3all)
        PACKAGES="$PACKAGES v3-format-storage"
        ;;
    n516)
        PACKAGES="$PACKAGES metronomefb-support n516-waveforms"
        ;;
esac

# Kernel
PACKAGES="$PACKAGES linux-modules-${LINUX_VERSION}${KERNEL_FLAVOUR}"
if [ "$MODE" = nfsroot ]; then
    PACKAGES="$PACKAGES linux-image-${LINUX_VERSION}${KERNEL_FLAVOUR}"
    PACKAGES="$PACKAGES boot-local-kernel"
fi

# GUI
PACKAGES="$PACKAGES nulldm xserver-xfbdev libewl1 libevas-engines fontconfig"

# Fonts
PACKAGES="$PACKAGES liberation-fonts libertine-fonts droid-fonts"

case $VARIANT in
    azbooka)
        ;;
    *)
        PACKAGES="$PACKAGES droid-fallback-fonts";;
esac

# i18n
PACKAGES="$PACKAGES gconv-data-basic"

# Applications
PACKAGES="$PACKAGES madshelf libextractor-mini-plugins"
PACKAGES="$PACKAGES fbreader"
PACKAGES="$PACKAGES locopdf"
PACKAGES="$PACKAGES cr3"
PACKAGES="$PACKAGES madeye"
PACKAGES="$PACKAGES etimetool"
PACKAGES="$PACKAGES gm shared-mime-info epuzzles uk uk-send uuwm eshutdown elock language-selector erot"
PACKAGES="$PACKAGES make-home"
case $DEVICE in
    v3|v3ext|v3all)
        PACKAGES="$PACKAGES esplash-data-v3 fbreader-settings-v3 libeoi-settings-v3 libchoicebox1-settings-v3"
        ;;
    n516)
        PACKAGES="$PACKAGES fbreader-settings-n516 madshelf-settings-n516 libeoi-settings-n516"
        PACKAGES="$PACKAGES locopdf-settings-n516"
        PACKAGES="$PACKAGES usbwatcher usbwatcher-data-azbooka-n516 elowbatt"

        case $VARIANT in
            azbooka)
                PACKAGES="$PACKAGES esplash-data-azbooka-n516 liblanguage-azbooka-data"
                PACKAGES="$PACKAGES libchoicebox1-settings-azbooka"
                ;;
            '')
                PACKAGES="$PACKAGES esplash-data-n516";;
        esac
        ;;
esac

# Debug
PACKAGES="$PACKAGES strace rsync kexec-tools mtd-utils sqlite3"

# if [ "$MODE" = "nfsroot" ]; then
#     PACKAGES="$PACKAGES gdbserver"
# fi

ARCHIVES=/var/cache/apt/archives

umount_all() {
    if [ -e "$1" ]; then
        sudo find "$1" -type d -print0 | xargs -0 -r -i{} -- sh -c "! mountpoint -q '{}' || (echo 'unmounting {}'; while sudo umount '{}' 2>/dev/null; do :; done)"
    fi
}

umount_all /rootfs-$HOSTARCH
umount_all /rootfs-$ARCH

sudo rm -rf /rootfs-$HOSTARCH
sudo rm -rf /rootfs-$ARCH

cross-bootstrap-host
cross-bootstrap-target $ARCH

echo "deb http://ftp.iplinux.org/iplinux asimov core security gui media" > /rootfs-$ARCH/etc/apt/sources.list
echo "deb http://openinkpot.org/pub/oi asimov core security gui media" >> /rootfs-$ARCH/etc/apt/sources.list

cross-shell $ARCH apt-get update
cross-shell $ARCH apt-get -y --force-yes dist-upgrade
cross-shell $ARCH apt-get -y --force-yes install $PACKAGES

server_args="-nocursor -wr -ac -noreset -nolisten inet6 -keybd evdev,,device=/dev/event0"

case $DEVICE in
    v3|v3ext|v3all)
        server_args="$server_args -screen 600x800 -dpi 170";;
    n516)
        server_args="$server_args -fb /dev/fb1 -screen 800x600@270 -dpi 200";;
    *)
        :;;
esac

echo "SERVER_ARGS=\"$server_args\"" > /rootfs-$ARCH/etc/default/nulldm

echo 'root:scKY2GQGBG3Nc:0:0:root:/root:/bin/sh' > /rootfs-$ARCH/etc/passwd

# Humm??
ln -sf /proc/mounts /rootfs-$ARCH/etc/mtab

echo '#!/bin/sh

if [ -z $ACTION ] || [ $ACTION = "add" ] ; then
    if [ -e /var/lib/usbwatcher/state ]; then
        . /var/lib/usbwatcher/state
        if [ x"$STATE" = x"mass_storage" ]; then
            exit 0;
        fi
    fi

    for i in /dev/mmcblk*
    do
        D1=`echo $i | sed -e s/p[0-9]*//`
        D2="/dev/"`echo $MDEV | sed -e s/p[0-9]*//`
        if [ $D1 != $D2 ]
        then
            umount $i
            rm -f $i
        fi
    done

    mount -o iocharset=utf8,flush,noatime /dev/$MDEV /media/sd

    killall -HUP madshelf
    exit 0
fi

if [ $ACTION = "remove" ] ; then
    umount -fl /dev/$MDEV
    killall -HUP madshelf
    exit 0
fi

echo "Unknown action. This script must be called by mdev!"
exit 1
' > /rootfs-$ARCH/sbin/automount.sh
chmod a+x /rootfs-$ARCH/sbin/automount.sh

echo "mmcblk[0-9]p[0-9] 0:0 0660 */sbin/automount.sh
mmcblk[0-9]* 0:0 0660 */sbin/automount.sh" > /rootfs-$ARCH/etc/mdev.conf.d/50automount

echo '#!/bin/sh

exec </dev/null >/dev/null 2>/dev/null
export USER=root

do_power_supply() {
        if [ x"$ACTION" = x"change" -a x"$POWER_SUPPLY_NAME" = x"usb" ]; then
                if [ $POWER_SUPPLY_ONLINE -eq 1 ]; then
                        echo 0 > /sys/power/autosuspend
                else
                        echo 1 > /sys/power/autosuspend
                fi
        fi
}

do_firmware() {
    HOTPLUG_FW_DIR=/lib/firmware

    echo 1 > /sys/$DEVPATH/loading
    cat $HOTPLUG_FW_DIR/$FIRMWARE > /sys/$DEVPATH/data
    echo 0 > /sys/$DEVPATH/loading
}

case $1 in
        power_supply)
                do_power_supply
                ;;
    firmware)
        do_firmware
        ;;
esac

for i in /lib/mdev/*
do
    ( . $i )
done

exec /sbin/mdev' > /rootfs-$ARCH/sbin/oi-hotplug.sh
chmod a+x /rootfs-$ARCH/sbin/oi-hotplug.sh

# FIXME!

sed -i -e 's,echo /sbin/mdev,echo /sbin/oi-hotplug.sh,' /rootfs-$ARCH/etc/init.d/mdev

case $DEVICE in
    v3|v3ext|v3all)
        if [ "$MODE" = "nfsroot" ]; then
            echo "eink_apollofb
lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev" > /rootfs-$ARCH/etc/modules
        else
            echo "lbookv3_keys
lbookv3_battery
mmc_block
s3cmci
vfat
evdev
mtdchar" > /rootfs-$ARCH/etc/modules
        fi
        ;;
    n516)
        echo "lm75
jz4740_udc" > /rootfs-$ARCH/etc/modules
        ;;
esac


mkdir -p /rootfs-$ARCH/mnt/storage
mkdir -p /rootfs-$ARCH/media/sd

if [ "$MODE" != "nfsroot" ]; then
    echo "tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/run tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0
tmpfs /var/log tmpfs defaults 0 0" > /rootfs-$ARCH/etc/fstab

    case $DEVICE in
        v3|v3ext|v3all)
            echo "/dev/mtdblock_STORAGE /mnt/storage jffs2 noatime 0 0" >> /rootfs-$ARCH/etc/fstab
            ;;
        n516)
            echo "/dev/mtdblock_storage /mnt/storage vfat quiet,iocharset=utf8,flush,noatime 0 0" >> /rootfs-$ARCH/etc/fstab
            ;;
    esac

    rm -rf /rootfs-$ARCH/root /rootfs-$ARCH/home
    ln -s /mnt/storage/.home /rootfs-$ARCH/home
    ln -s /home/user /rootfs-$ARCH/root

    rm -rf /rootfs-$ARCH/var/log/*
    # Apt goes awry if log directory does not exist.
    mkdir -p /rootfs-$ARCH/var/log/apt
fi

if [ -z "$VARIANT" ]; then
    echo "OpenInkpot $VERSION ($DEVICE)" > /rootfs-$ARCH/etc/openinkpot-version
else
    echo "OpenInkpot $VERSION ($DEVICE-$VARIANT)" > /rootfs-$ARCH/etc/openinkpot-version
fi

iface=usb0
#[ "$DEVICE" == "n516" ] && iface=eth0

echo "auto lo
iface lo inet loopback

auto $iface
iface $iface inet static
    address 192.168.111.1
    netmask 255.255.255.0
    broadcast 192.168.111.255
    gateway 192.168.111.2
" > /rootfs-$ARCH/etc/network/interfaces

echo 'nameserver 192.168.111.2' > /rootfs-$ARCH/etc/resolv.conf

case $DEVICE in
    v3*)
        # Hold-Power => power off
        echo 'Alt-124   eshutdown   Power      exec eshutdown' > /rootfs-$ARCH/etc/uk.conf
        # Power => lock
        echo '124       elock       Lock       exec elock' >> /rootfs-$ARCH/etc/uk.conf
        # Hold-Esc => main menu
        echo 'Alt-9     gm          Activate   exec gm' >> /rootfs-$ARCH/etc/uk.conf
        # Hold-+ => rotate
        # Hold-- => rotate back
        echo '
Alt-86    erot        RotateForward  exec erot
Alt-82    erot        RotateBack     exec erot' >> /rootfs-$ARCH/etc/uk.conf
        ;;
    n516)
        #
        # Pre-generation of most used locales
        #
        for i in ru_RU uk_UA en_US; do
            lzcat /rootfs-$ARCH/usr/lib/locale-archive/main.tar.lzma | tar -x -C /rootfs-$ARCH/usr/lib/locale $i.UTF-8
        done

        # uk.conf
        echo '124     eshutdown       Power   exec eshutdown
147     gm      Activate exec gm

161     erot    Rotate  exec erot

150     elock   Lock    exec elock --hardware-lock
151     elock   Unlock  exec elock --hardware-lock' > /rootfs-$ARCH/etc/uk.conf

        ;;
    *)
        ;;
esac

find_file() {
    F="$1"

    if [ -f "$F" ]; then
        echo "$F"
        return
    fi
    if [ -f "logo/$F" ]; then
        echo "logo/$F"
        return
    fi
    if [ -f "oi-build-firmware/logo/$F" ]; then
        echo "oi-build-firmware/logo/$F"
        return
    fi
    if [ -f "../logo/$F" ]; then
        echo "../logo/$F"
        return
    fi
    if [ -f "data/$F" ]; then
        echo "data/$F"
        return
    fi
    if [ -f "oi-build-firmware/data/$F" ]; then
        echo "oi-build-firmware/data/$F"
        return
    fi
    if [ -f "../data/$F" ]; then
        echo "../data/$F"
        return
    fi
    if [ -f "/usr/share/oi-build-firmware/$F" ]; then
        echo "/usr/share/oi-build-firmware/$F" 
        return
    fi
}

# Pre-created dropbear keys
DSA_K=$(find_file dropbear_dss_host_key)
cp "$DSA_K" /rootfs-$ARCH/etc/dropbear/dropbear_dss_host_key
RSA_K=$(find_file dropbear_rsa_host_key)
cp "$RSA_K" /rootfs-$ARCH/etc/dropbear/dropbear_rsa_host_key
chmod 600 /rootfs-$ARCH/etc/dropbear/*

case $DEVICE in
    n516)
        case $VARIANT in
            azbooka)
                SPLASH=azbooka-splash.png
                ERRORSPLASH=azbooka-errorsplash.png
                ;;
            *)
                SPLASH=oi-splash.png
                ERRORSPLASH=oi-splash.png
                ;;
        esac
        # Bootloader
        F_AZ=$(find_file $SPLASH)
        mk-rawpic -r270 -d3 --high $F_AZ $WORK_DIR/bootsplash.dat
        F_EAZ=$(find_file $ERRORSPLASH)
        mk-rawpic -r270 -d3 --high $F_EAZ $WORK_DIR/errorsplash.dat


        # Pre-generated fontconfig cache
        FC_F=$(find_file fontconfig/0fdfe5ca58fd9bc9e4fc72abcd5bc429-mipsel-ip-linux-gnu.cache-2)
        FC_D=$(dirname "$FC_F")
        cp "$FC_D/"* /rootfs-$ARCH/var/cache/fontconfig
    ;;
    *)
    ;;
esac

ROOTFS=$WORK_DIR/rootfs$KERNEL_FLAVOUR-$ARCH.tar

cross-pack-rootfs $ARCH $ROOTFS

case "$MODE" in
    nfsroot)
        cp $ROOTFS "$OUTPUT_DIR/$OUTPUT_NAME.tar"
        bzip2 -9 "$OUTPUT_DIR/$OUTPUT_NAME.tar";;
    install)
        cross-shell $ARCH apt-get -y --force-yes install linux-image-${LINUX_VERSION}$KERNEL_FLAVOUR

        mkdir -p $WORK_DIR/rootfs
        (cd $WORK_DIR/rootfs && sudo tar xf $ROOTFS)

        if [ $DEVICE = n516 ]; then
            wget -O $WORK_DIR/metronome.wbf http://openinkpot.org/pub/contrib/n516-waveforms/default.wbf

            rm -f $WORK_DIR/pattern-tmp
            dd if=/dev/zero count=6321 bs=61440 | tr '\0' '\377' > $WORK_DIR/storage.vfat.fs

            /sbin/mkfs.vfat $WORK_DIR/storage.vfat.fs

            do_pack_n516_firmware
        else
            if [ $DEVICE = v3 ]; then
                ERASEBLOCK=16384
                PAGESIZE=512
            else
                ERASEBLOCK=131072
                PAGESIZE=2048
            fi

            sudo mkfs.jffs2 -l -n -e $ERASEBLOCK -s $PAGESIZE --faketime -r $WORK_DIR/rootfs -o $WORK_DIR/rootfs.noopt.jffs2
            sumtool -e $ERASEBLOCK -l -i $WORK_DIR/rootfs.noopt.jffs2 -o $WORK_DIR/rootfs.jffs2
            
            mkv3update --write-oi=$WORK_DIR/V3update.bin /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}$KERNEL_FLAVOUR +$WORK_DIR/rootfs.jffs2
        
            sync
            (cd $WORK_DIR; tar c V3update.bin) | bzip2 > "$OUTPUT_DIR/$OUTPUT_NAME.tar.bz2"
            zip -j $OUTPUT_DIR/$OUTPUT_NAME.zip $WORK_DIR/V3update.bin
        fi
        ;;
    live)
        cd $WORK_DIR
        cross-shell $ARCH apt-get -y --force-yes install linux-image-${LINUX_VERSION}-v3
        cp /rootfs-$ARCH/boot/vmlinuz-${LINUX_VERSION}-v3 .

        # Creates $WORK_DIR/initrd.gz
        mkinitramfs-v3

        # Consumes $ROOTFS, generates $WORK_DIR/rootfs.ext2
        (cd $WORK_DIR; mkrootfs.ext2 $ROOTFS)

        mkdir -p $WORK_DIR/openinkpot

        mv $WORK_DIR/initrd.gz $WORK_DIR/rootfs.ext2 $WORK_DIR/vmlinuz-${LINUX_VERSION}-v3 $WORK_DIR/openinkpot

        echo "#!/bin/sh
DIR=\`dirname \$0\`
insmod \$DIR/reloaded.ko kernel=\$DIR/vmlinuz-${LINUX_VERSION}-v3 initrd=\$DIR/initrd.gz >> \$DIR/boot.log.txt 2>&1
dmesg > \$DIR/dmesg.txt
" > $WORK_DIR/openinkpot/boot-OI-V3.exe.fb2

        wget -O $WORK_DIR/openinkpot/reloaded.ko http://openinkpot.org/pub/contrib/v3all-reloaded/reloaded.ko

        (cd $WORK_DIR; tar cv openinkpot/ | bzip2 -9 > $OUTPUT_DIR/$OUTPUT_NAME.tar.bz2)
        (cd $WORK_DIR; zip -r $OUTPUT_DIR/$OUTPUT_NAME.zip openinkpot)
        ;;
esac
